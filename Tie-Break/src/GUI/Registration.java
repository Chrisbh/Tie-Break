package GUI;

import BE.Member;
import BLL.MemberManager;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

public class Registration extends javax.swing.JFrame
{

    private MemberManager mManager;
    private boolean zipCancelled = false;
    private boolean phoneCancelled = false;
    private boolean bdCancelled = false;
    private boolean passwordCancelled = false;
    private boolean Elite = false;
    private boolean Coach = false;
    private static Registration instance = null;

    /**
     * Constructor for the registration class
     */
    private Registration()
    {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        mManager = MemberManager.getInstance();
        setTitle("Registrering af medlem");
    }

    /**
     * Conversion of the registration class to a singleton
     *
     * @return An instance of the registration class
     */
    public static Registration getInstance()
    {
        if (instance == null)
        {
            instance = new Registration();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lblName = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblZipCodeCity = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhoneNumber = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtZipCode = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhoneNumber = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblBday = new javax.swing.JLabel();
        txtBDate = new javax.swing.JTextField();
        lblPostNrByAdskiller = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblRepeatPassword = new javax.swing.JLabel();
        pfPassword = new javax.swing.JPasswordField();
        pfRepeatPassword = new javax.swing.JPasswordField();
        txtBMonth = new javax.swing.JTextField();
        txtBYear = new javax.swing.JTextField();
        chbkCoach = new javax.swing.JCheckBox();
        chbkElite = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lblName.setText("Navn");

        lblAddress.setText("Adresse");

        lblZipCodeCity.setText("Postnr/By");

        lblEmail.setText("Email");

        lblPhoneNumber.setText("Telefonnr");

        btnAdd.setText("Tilføj");
        btnAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddActionPerformed(evt);
            }
        });

        btnCancel.setText("Annuller");
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Tilføjelse af nyt medlem");

        lblBday.setText("Fødselsdato");

        txtBDate.setToolTipText("");

        lblPostNrByAdskiller.setText("/");

        lblPassword.setText("Kodeord");

        lblRepeatPassword.setText("Gentag kodeord");

        txtBMonth.setToolTipText("");

        txtBYear.setToolTipText("");

        chbkCoach.setText("Træner");
        chbkCoach.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbkCoachActionPerformed(evt);
            }
        });

        chbkElite.setText("Elite");
        chbkElite.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbkEliteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassword)
                            .addComponent(lblRepeatPassword))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel)
                                .addGap(10, 10, 10))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pfRepeatPassword)
                                    .addComponent(pfPassword))
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(lblAddress)
                            .addComponent(lblZipCodeCity)
                            .addComponent(lblEmail)
                            .addComponent(lblPhoneNumber)
                            .addComponent(lblBday))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPhoneNumber)
                            .addComponent(txtEmail)
                            .addComponent(txtAddress)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(lblPostNrByAdskiller)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCity))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtBDate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBYear)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chbkElite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chbkCoach)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZipCodeCity)
                    .addComponent(txtZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPostNrByAdskiller))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNumber)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBday)
                    .addComponent(txtBDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(pfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRepeatPassword)
                    .addComponent(pfRepeatPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbkCoach)
                    .addComponent(chbkElite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnCancel)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddActionPerformed
    {//GEN-HEADEREND:event_btnAddActionPerformed
        addMember();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        clearFields();
        Administration.getInstance().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chbkEliteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbkEliteActionPerformed
    {//GEN-HEADEREND:event_chbkEliteActionPerformed
        Elite = true;
    }//GEN-LAST:event_chbkEliteActionPerformed

    private void chbkCoachActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbkCoachActionPerformed
    {//GEN-HEADEREND:event_chbkCoachActionPerformed
        Coach = true;
    }//GEN-LAST:event_chbkCoachActionPerformed

    /**
     * Adds a member to the database
     */
    public void addMember()
    {
        if (txtFirstName.getText().length() != 0 && txtLastName.getText().length() != 0
                && txtAddress.getText().length() != 0 && txtCity.getText().length() != 0
                && txtEmail.getText().length() != 0 && txtBDate.getText().length() != 0
                && pfPassword.getText().length() != 0
                && pfRepeatPassword.getText().length() != 0)
        {
            Scanner zipCodeSc = new Scanner(txtZipCode.getText());
            Scanner phoneSc = new Scanner(txtPhoneNumber.getText());

            checkInt(zipCodeSc, phoneSc);

            if (!zipCancelled)
            {
                zipCodeSc = new Scanner(txtZipCode.getText());
                int lengthZip = String.valueOf(zipCodeSc.nextInt()).length();
                while (lengthZip != 4)
                {
                    String correctedZipCode = JOptionPane.showInputDialog(null, "Postnummer skal være på 4 cifre, intast det rigtige!");
                    if (correctedZipCode == null)
                    {
                        zipCancelled = true;
                        break;
                    }
                    txtZipCode.setText(correctedZipCode);
                    zipCodeSc = new Scanner(txtZipCode.getText());
                    checkInt(zipCodeSc, phoneSc);
                    zipCodeSc = new Scanner(txtZipCode.getText());
                    lengthZip = String.valueOf(zipCodeSc.nextInt()).length();
                }
            }

            if (!phoneCancelled)
            {
                checkInt(zipCodeSc, phoneSc);
                phoneSc = new Scanner(txtPhoneNumber.getText());
                int lengthPhone = String.valueOf(phoneSc.nextInt()).length();

                while (lengthPhone != 8)
                {
                    String correctedPhone = JOptionPane.showInputDialog(null, "TelefonNummer skal være på 8 cifre, intast det rigtige!");
                    if (correctedPhone == null)
                    {
                        phoneCancelled = true;
                        break;
                    }
                    txtPhoneNumber.setText(correctedPhone);

                    phoneSc = new Scanner(txtPhoneNumber.getText());
                    checkInt(zipCodeSc, phoneSc);
                    phoneSc = new Scanner(txtPhoneNumber.getText());
                    lengthPhone = String.valueOf(phoneSc.nextInt()).length();
                }
            }

            if (!bdCancelled)
            {
                checkInt(zipCodeSc, phoneSc);
                int bd = new Scanner(txtBDate.getText()).nextInt();
                int bm = new Scanner(txtBMonth.getText()).nextInt();
                int by = new Scanner(txtBYear.getText()).nextInt();

                while (txtBDate.getText().length() != 2 || bd < 1 || bd > 31)
                {
                    String corredtedBD = JOptionPane.showInputDialog(null, "Der skal være 2 cifre i din fødselsdag, eller en rigtig dato - DD, intast det rigtige!");
                    if (corredtedBD == null)
                    {
                        bdCancelled = true;
                        break;
                    }
                    txtBDate.setText(corredtedBD);
                    bdCancelled = false;
                    bd = new Scanner(txtBDate.getText()).nextInt();
                    checkInt(zipCodeSc, phoneSc);
                }


                while (txtBMonth.getText().length() != 2 || bm < 1 || bm > 12)
                {
                    String corredtedBD = JOptionPane.showInputDialog(null, "Der skal være 2 cifre i din fødselsmåned - MM, intast det rigtige!");
                    if (corredtedBD == null)
                    {
                        bdCancelled = true;
                        break;
                    }
                    txtBMonth.setText(corredtedBD);
                    bdCancelled = false;
                    bm = new Scanner(txtBMonth.getText()).nextInt();
                    checkInt(zipCodeSc, phoneSc);

                }
                while (txtBYear.getText().length() != 4 || by > Calendar.getInstance().get(Calendar.YEAR))
                {
                    String corredtedBD = JOptionPane.showInputDialog(null, "Der skal være 4 cifre i din fødselsår - YYYY, intast det rigtige!");
                    if (corredtedBD == null)
                    {
                        bdCancelled = true;
                        break;
                    }
                    txtBYear.setText(corredtedBD);
                    bdCancelled = false;
                    by = new Scanner(txtBYear.getText()).nextInt();
                    checkInt(zipCodeSc, phoneSc);
                }
            }

            if (!passwordCancelled)
            {
                if (!pfPassword.getText().equals(pfRepeatPassword.getText()))
                {
                    JOptionPane.showMessageDialog(null, "Kodeord skal være ens");
                    passwordCancelled = true;
                }
                else
                {
                    passwordCancelled = false;
                }
            }

            if (!zipCancelled && !phoneCancelled && !bdCancelled && !passwordCancelled)
            {
                if (JOptionPane.showConfirmDialog(null, "Vil du gemme brugeren?", "Advarsel",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                        == JOptionPane.YES_OPTION)
                {
                    Calendar bDate = new GregorianCalendar();

                    String firstName = txtFirstName.getText();
                    String lastName = txtLastName.getText();
                    String address = txtAddress.getText();
                    int zipCode = Integer.parseInt(txtZipCode.getText());
                    String city = txtCity.getText();
                    String email = txtEmail.getText();
                    int phoneNumber = Integer.parseInt(txtPhoneNumber.getText());
                    int bDay = Integer.parseInt(txtBDate.getText());
                    int bMonth = Integer.parseInt(txtBMonth.getText()) - 1;
                    int bYear = Integer.parseInt(txtBYear.getText());
                    bDate.set(bYear, bMonth, bDay, 0, 0, 0);
                    Calendar bday = bDate;
                    String password = new Scanner(pfPassword.getText()).nextLine();
                    Member m = new Member(zipCode, firstName, lastName, address, zipCode, city, email, phoneNumber, bday, password, Elite, Coach);
                    try
                    {
                        mManager.addMember(m);
                        clearFields();
                        dispose();
                    }
                    catch (Exception e)
                    {
                        System.out.println("ERROR - " + e);
                    }
                    Administration.getInstance().setVisible(true);
                }
            }
            else
            {
                zipCancelled = false;
                phoneCancelled = false;
                bdCancelled = false;
                passwordCancelled = false;
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Alle felter skal udfyldes!", "Advarsel", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /*
     * Clears the text fields on the gui
     */
    private void clearFields()
    {
        txtFirstName.setText("");
        txtLastName.setText("");
        txtAddress.setText("");
        txtZipCode.setText("");
        txtCity.setText("");
        txtEmail.setText("");
        txtPhoneNumber.setText("");
        txtBDate.setText("");
        pfPassword.setText("");
        pfRepeatPassword.setText("");
    }

    /*
     * Checks if the entered text is a number
     */
    private void checkInt(Scanner zipCodeSc, Scanner phoneSc)
    {
        zipCodeSc = new Scanner(txtZipCode.getText());
        while (!zipCodeSc.hasNextInt())
        {
            String correctedZipCode = JOptionPane.showInputDialog(null, "Postnummer skal være et nummer, intast det rigtige!");
            if (correctedZipCode == null)
            {
                zipCancelled = true;
                break;
            }
            txtZipCode.setText(correctedZipCode);

            zipCodeSc = new Scanner(txtZipCode.getText());
            zipCancelled = false;
        }

        phoneSc = new Scanner(txtPhoneNumber.getText());
        while (!phoneSc.hasNextInt())
        {
            String correctedPhone = JOptionPane.showInputDialog(null, "TelefonNummer skal være et nummer, intast det rigtige!");
            if (correctedPhone == null)
            {
                phoneCancelled = true;
                break;
            }
            txtPhoneNumber.setText(correctedPhone);

            phoneSc = new Scanner(txtPhoneNumber.getText());
            phoneCancelled = false;
        }

        Scanner bdSc = new Scanner(txtBDate.getText());
        while (!bdSc.hasNextInt())
        {
            String correctedBD = JOptionPane.showInputDialog(null, "Det første af CPR skal være et nummer, intast det rigtige!");
            if (correctedBD == null)
            {
                bdCancelled = true;
                break;
            }
            txtBDate.setText(correctedBD);

            bdSc = new Scanner(txtBDate.getText());
            bdCancelled = false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /*
         * Get system look and feel
         */
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e)
        {
            //Do nothing
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Registration().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JCheckBox chbkCoach;
    private javax.swing.JCheckBox chbkElite;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblBday;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblPostNrByAdskiller;
    private javax.swing.JLabel lblRepeatPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblZipCodeCity;
    private javax.swing.JPasswordField pfPassword;
    private javax.swing.JPasswordField pfRepeatPassword;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBDate;
    private javax.swing.JTextField txtBMonth;
    private javax.swing.JTextField txtBYear;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtZipCode;
    // End of variables declaration//GEN-END:variables
}
